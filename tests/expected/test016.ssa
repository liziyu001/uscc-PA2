; ModuleID = 'main'

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str1 = private unnamed_addr constant [4 x i8] c"%d,\00"

declare i32 @printf(i8*, ...)

define void @printArray(i32* %array, i32 %size) {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %Phi1 = phi i32 [ %inc, %while.body ], [ 0, %entry ]
  %sub = sub i32 %size, 1
  %lt = icmp slt i32 %Phi1, %sub
  br i1 %lt, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %0 = getelementptr inbounds i32* %array, i32 %Phi1
  %1 = load i32* %0
  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %1)
  %inc = add i32 %Phi1, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = getelementptr inbounds i32* %array, i32 %Phi1
  %4 = load i32* %3
  %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %4)
  ret void
}

define i32 @main() {
entry:
  %array = alloca [5 x i32], align 8
  %0 = getelementptr inbounds [5 x i32]* %array, i32 0, i32 0
  %1 = getelementptr inbounds i32* %0, i32 0
  store i32 1, i32* %1
  %2 = getelementptr inbounds i32* %0, i32 1
  store i32 1, i32* %2
  %3 = getelementptr inbounds i32* %0, i32 2
  store i32 2, i32* %3
  %4 = getelementptr inbounds i32* %0, i32 3
  store i32 3, i32* %4
  %5 = getelementptr inbounds i32* %0, i32 4
  store i32 5, i32* %5
  call void @printArray(i32* %0, i32 5)
  %6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 10)
  ret i32 0
}
