; ModuleID = 'main'

@.str = private unnamed_addr constant [8 x i8] c"y != 1\0A\00"
@.str1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %Phi = phi i32 [ %Phi5, %if.end ], [ 1, %entry ]
  %Phi1 = phi i32 [ %dec, %if.end ], [ 5, %entry ]
  %tobool = icmp ne i32 %Phi, 0
  br i1 %tobool, label %and.rhs, label %and.end

and.rhs:                                          ; preds = %while.cond
  %tobool2 = icmp ne i32 %Phi1, 0
  br label %and.end

and.end:                                          ; preds = %and.rhs, %while.cond
  %0 = phi i1 [ false, %while.cond ], [ %tobool2, %and.rhs ]
  %1 = zext i1 %0 to i32
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %while.body, label %while.end

while.body:                                       ; preds = %and.end
  %3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %Phi1)
  %dec = sub i32 %Phi1, 1
  %eq = icmp eq i32 %dec, 1
  br i1 %eq, label %if.then, label %if.else

while.end:                                        ; preds = %and.end
  ret i32 0

if.then:                                          ; preds = %while.body
  br label %if.end

if.end:                                           ; preds = %if.then, %if.else
  %Phi5 = phi i32 [ 0, %if.then ], [ %Phi, %if.else ]
  br label %while.cond

if.else:                                          ; preds = %while.body
  %4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str, i32 0, i32 0))
  br label %if.end
}
