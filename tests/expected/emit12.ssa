; ModuleID = 'main'

@.str = private unnamed_addr constant [25 x i8] c"%d is a multiple of %d.\0A\00"
@.str1 = private unnamed_addr constant [34 x i8] c" is not a multiple of 2, 3 or 5.\0A\00"
@.str2 = private unnamed_addr constant [23 x i8] c" is a multiple of %d.\0A\00"
@.str3 = private unnamed_addr constant [3 x i8] c"%d\00"

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %Phi = phi i32 [ %inc, %if.end ], [ 1, %entry ]
  %lt = icmp slt i32 %Phi, 11
  br i1 %lt, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %0 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str3, i32 0, i32 0), i32 %Phi)
  %mod = srem i32 %Phi, 2
  %1 = icmp eq i32 %mod, 0
  %2 = zext i1 %1 to i32
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %if.then, label %if.else

while.end:                                        ; preds = %while.cond
  ret i32 0

if.then:                                          ; preds = %while.body
  %4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str2, i32 0, i32 0), i32 2)
  %mod9 = srem i32 %Phi, 3
  %5 = icmp eq i32 %mod9, 0
  %6 = zext i1 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %if.then10, label %if.end11

if.end:                                           ; preds = %if.end15, %if.end3
  %inc = add i32 %Phi, 1
  br label %while.cond

if.else:                                          ; preds = %while.body
  %mod1 = srem i32 %Phi, 3
  %8 = icmp eq i32 %mod1, 0
  %9 = zext i1 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %if.then2, label %if.else4

if.then2:                                         ; preds = %if.else
  %11 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str2, i32 0, i32 0), i32 3)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end7
  br label %if.end

if.else4:                                         ; preds = %if.else
  %mod5 = srem i32 %Phi, 5
  %12 = icmp eq i32 %mod5, 0
  %13 = zext i1 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else4
  %15 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([23 x i8]* @.str2, i32 0, i32 0), i32 5)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.else8
  br label %if.end3

if.else8:                                         ; preds = %if.else4
  %16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str1, i32 0, i32 0))
  br label %if.end7

if.then10:                                        ; preds = %if.then
  %17 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str, i32 0, i32 0), i32 %Phi, i32 3)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then
  %mod13 = srem i32 %Phi, 5
  %18 = icmp eq i32 %mod13, 0
  %19 = zext i1 %18 to i32
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end11
  %21 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str, i32 0, i32 0), i32 %Phi, i32 5)
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.end11
  br label %if.end
}
